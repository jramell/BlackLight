    /// <summary>
    /// Adds in order to the dialogText every character passed as a parameter with 'textWriteDelay' seconds between each
    /// character addition. Also, plays the writingSoundEffect passed as a parameter the maximum between the amount
    /// of characters in the 'text' string and numberOfPlays.
    /// If numberOfPlays is zero or writingSoundEffect is null, no sound effect will be played.
    /// </summary>
    /// <param name="text">the text to be added to the dialog</param>
    /// <param name="dialogText">the dialog to which the text will be added</param>
    /// <param name="textWriteDelay">the time between character additions to the dialog</param>
    /// <param name="writingSoundEffect">the sound effect that can be played each time a character is written</param>
    /// <param name="numberOfPlays">the number of characters that are written before the next time the sound is played, excluding the current one. If 0, the 
    ///                             sound would play for every character. </param>
    /// <returns></returns>
    public static IEnumerator IntroduceText(string text, Text dialogText, float textWriteDelay, AudioSource writingSoundEffect, int numberOfCharactersBetweenPlays)
    {
        char[] textInChar = text.ToCharArray();

        int counter = 0;

        bool canPlay = writingSoundEffect != null;

        for (int i = 0; i < textInChar.Length; i++)
        {
            if (canPlay)
            {
                writingSoundEffect.Play();
                counter += 1;
                canPlay = numberOfPlays > 0;
            }
            dialogText.text += textInChar[i];
            yield return new WaitForSeconds(textWriteDelay);
        }
    }